/*
 * Copyright (c) teris.io & Oleg Sklyar, 2017. All rights reserved
 */

import java.nio.file.Paths

ext {
	activemqBrokerModule = "org.apache.activemq:activemq-broker:5.15.2"
	activemqClientModule = "org.apache.activemq:activemq-client:5.15.2"
	activemqKahaDbModule = "org.apache.activemq:activemq-kahadb-store:5.15.2"
	findbugsModule = "com.google.code.findbugs:annotations:3.0.1"
	geronimoJmsModule = "org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1.1"
	gsonModule = "com.google.code.gson:gson:2.8.2"
	logbackModule = "ch.qos.logback:logback-classic:1.2.3"
	slf4jModule = "org.slf4j:slf4j-api:1.7.25"
	vertxWebModule = "io.vertx:vertx-web:3.5.0"
	vertxTestModule = "io.vertx:vertx-unit:3.5.0"

	junitModule = "junit:junit:4.12"
	mockitoModule = "org.mockito:mockito-core:2.12.0"

}

allprojects {
	version = "0.3.2"
	group = "io.teris.rpc"

	plugins.apply(JacocoPlugin)

	repositories.jcenter()
}

subprojects {
  plugins.apply(JavaPlugin)
	plugins.apply(MavenPlugin)

	task("integration", type: Test) {
		enabled = false
		dependsOn(test)
	}

	tasks.withType(AbstractCompile) {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
	}

	tasks.withType(Test) {
		jacoco {
			append = true
			destinationFile = Paths.get(rootProject.buildDir.absolutePath, "jacoco", project.name + "-" + name + ".exec").toFile()
		}
	}

	jacocoTestReport.reports {
		xml.enabled = false
		html.enabled = false
		csv.enabled = false
	}

	task("sourcesJar", type: Jar, dependsOn: classes) {
		classifier = "sources"
		from(sourceSets.main.allSource)
	}

	javadoc {
		failOnError false
		options.addStringOption('Xdoclint:none', '-quiet')
	}

	task("javadocJar", type: Jar, dependsOn: javadoc) {
		classifier = "javadoc"
		from(javadoc.destinationDir)
	}

	artifacts.add("archives", sourcesJar)
	artifacts.add("archives", javadocJar)
}

task("clean", type: Delete) {
	delete(buildDir)
}

task("coverage", type: JacocoReport) {
	dependsOn(subprojects*.integration)
	executionData(fileTree(Paths.get(rootProject.buildDir.absolutePath, "jacoco").toFile()).include("*.exec"))

	setSourceDirectories(files(subprojects*.sourceSets.main.java.srcDirs))
	setClassDirectories(files(subprojects*.sourceSets.main.output))

	reports {
		xml.enabled = true
		xml.setDestination(Paths.get(rootProject.buildDir.absolutePath, "reports", "jacoco", "report.xml").toFile())
		html.enabled = false
		csv.enabled = false
	}
}
