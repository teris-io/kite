/*
 * Copyright (c) teris.io & Oleg Sklyar, 2017. All rights reserved
 */

import java.nio.file.Paths

ext {
  findbugsModule = "com.google.code.findbugs:annotations:3.0.1"
	jacksonDatabindModule = "com.fasterxml.jackson.core:jackson-databind:2.9.2"
	jacksonDataformatXmlModule = "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.2"
	jacksonDataformatYamlModule = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.2"
	jacksonDataformatYamlModule = "com.fasterxml.jackson.dataformat:jackson-dataformat-protobuf:2.9.2"
	jacksonDatatypeJSR310Module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.2"
	woodstockCoreAslModule = "org.codehaus.woodstox:woodstox-core-asl:4.4.1"
	vertxWebModule = "io.vertx:vertx-web:3.5.0"

	junitModule = "junit:junit:4.12"
	mockitoModule = "org.mockito:mockito-core:2.12.0"
}

allprojects {
	version = "0.1.0-SNAPSHOT"
	group = "io.teris.rpc"

	plugins.apply(JacocoPlugin)

	repositories.jcenter()
}

subprojects {
  plugins.apply(JavaPlugin)
	plugins.apply(MavenPlugin)

	configurations {
		integration

		integrationTestCompile.extendsFrom(testCompile)
		integrationTestRuntime.extendsFrom(testRuntime)
	}

	sourceSets {
		integration {
			compileClasspath += sourceSets.test.compileClasspath + main.output + test.output
			runtimeClasspath += sourceSets.test.runtimeClasspath + main.output + test.output
		}
	}

	task("integration", type: Test) {
		dependsOn(subprojects*.test)
		description = "Run integration tests from in [src/]integration/..."
		setTestClassesDirs(sourceSets.integration.output.classesDirs)
		setClasspath(sourceSets.integration.runtimeClasspath)
	}

	tasks.withType(AbstractCompile) {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
	}

	test.jacoco {
		append = false
		destinationFile = Paths.get(rootProject.buildDir.absolutePath, "jacoco", project.name + ".exec").toFile()
	}

	jacocoTestReport.reports {
		xml.enabled = false
		html.enabled = false
		csv.enabled = false
	}

	task("sourcesJar", type: Jar, dependsOn: classes) {
		classifier = "sources"
		from(sourceSets.main.allSource)
	}

	javadoc {
		failOnError false
	}

	task("javadocJar", type: Jar, dependsOn: javadoc) {
		classifier = "javadoc"
		from(javadoc.destinationDir)
	}

	artifacts.add("archives", sourcesJar)
	artifacts.add("archives", javadocJar)
}

task("clean", type: Delete) {
	delete(buildDir)
}

task("coverage", type: JacocoReport) {
	dependsOn(subprojects*.test)

	executionData(fileTree(Paths.get(rootProject.buildDir.absolutePath, "jacoco").toFile()).include("*.exec"))

	setSourceDirectories(files(subprojects*.sourceSets.main.java.srcDirs))
	setClassDirectories(files(subprojects*.sourceSets.main.output))

	reports {
		xml.enabled = true
		xml.setDestination(Paths.get(rootProject.buildDir.absolutePath, "reports", "jacoco", "report.xml").toFile())
		html.enabled = false
		csv.enabled = false
	}
}
